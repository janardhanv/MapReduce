Download the file and uncompress it (gunzip price.sqlite3.gz) to get a sqlite3 database.  The file contains the book _Pride and Prejudice_ by Jane Austin, taken from Project Gutenberg.  Each row in the database contains a single line from the input file.  The key is the file name and the offset into the original file where the line began, and the value is the text of the line.

You can explore it using the sqlite3 tool:

sqlite3 price.sqlite3

A few commands to try:

.schema
select count(*) from pairs;

==================================================================================================================================================================================================================================================================================================================================================================================================================================================================

Your map and reduce functions should use channels.  The functions should have signatures like this:

type Pair struct { Key, Value string }

func map(key, value string, output chan<- Pair) error { ... }

func reduce(key, values <-chan string, output chan<- Pair) error { ... }

So the map function gets a key/value pair, and a channel where it feeds any and all key/value pairs it generates. When it is finished producing output, it should call close(output) to close the channel.  The library at the other end of the channel can detect when it is closed:

p, ok := <-output

if !ok { // channel is closed, no more values coming }

reduce is given a single key and a channel of values (strings).  It detects when the supply is exhausted in the same way:

http://golang.org/ref/spec#Receive_operator

It also feeds key/value output pairs to its output channel and closes the channel when it is finished.
